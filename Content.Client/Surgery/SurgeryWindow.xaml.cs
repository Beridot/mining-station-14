using System.Linq;
using Content.Client.Stylesheets;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Content.Shared.Surgery;
using Robust.Shared.Prototypes;
using static Robust.Client.UserInterface.Controls.BoxContainer;
using Content.Shared.Body.Part;
using Robust.Client.Graphics;
//using static Content.Client.IoC.StaticIoC;

namespace Content.Client.Surgery
{

    [GenerateTypedNameReferences]
    public sealed partial class SurgeryWindow : DefaultWindow
    {
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
        public event Action<BaseButton.ButtonEventArgs, SurgerySlotButton>? OnSurgerySlotButtonPressed;
        public static int DefaultButtonSize = 96;

        /// <summary>
        ///
        /// </summary>
        public SurgeryWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

        }

        /// <summary>
        /// 
        /// </summary>
        public void UpdateSurgeryMenu(SurgeryBoundUserInterfaceState state)
        {
            BodyPartSlotList.Children.Clear();

            if (state.BodyPartSlots is null)
            {
                BodyPartSlotList.Children.Add(new Label { Text = "Body has no available part slots to operate on." }); //TODO loc
                return;
            }

            for (var i = 0; i < state.BodyPartSlots.Count; i++)
            {
                if (state.BodyPartSlots[i] != null) {

                    var typeVal = state.BodyPartSlots[i].Type ?? 0;
                    var slotType = ((BodyPartType)typeVal).ToString(); //TODO loc

                    var button = new SurgerySlotButton(state.BodyPartSlots[i], slotType);
                    button.OnPressed += args => OnSurgerySlotButtonPressed?.Invoke(args, button);
                    BodyPartSlotList.AddChild(button);
                }
            }
        }

        /// <summary>
        /// Update the UI state when new state data is received from the server.
        /// </summary>
        /// <param name="state">State data sent by the server.</param>
        public void UpdateState(BoundUserInterfaceState state)
        {
            var castState = (SurgeryBoundUserInterfaceState) state;
            UpdateSurgeryMenu(castState);

        }

        public sealed class SurgerySlotButton : TextureButton
        {
            public BodyPartSlot Slot { get; }
            public string SlotType { get; }

            public SurgerySlotButton(BodyPartSlot slot, string slotType)
            {
                Slot = slot;
                SlotType = slotType;
                //Text = slotType; //TODO loc
                //Scale = (0.75f, 0.75f);
                MinSize = (DefaultButtonSize, DefaultButtonSize);
                MaxSize = (DefaultButtonSize, DefaultButtonSize);
                TextureNormal = Theme.ResolveTexture("/Slots/hand_l");
            }
        }

    }
}
